using System;
using System.Net.Http;
using System.Text;
using System.Threading.Tasks;
using Developer_Toolbox.Services.Vulnerability;
using Microsoft.Extensions.Configuration;
using Newtonsoft.Json;

namespace Developer_Toolbox.Services.Vulnerability
{
    public class VulnerabilityService : IVulnerabilityService
    {
        private readonly HttpClient _httpClient;
        private readonly string _apiUrl;

        public VulnerabilityService(IConfiguration configuration, HttpClient httpClient = null)
        {
            _httpClient = httpClient ?? new HttpClient();
            _apiUrl = configuration["VulnerabilityAPI:BaseUrl"] ?? "http://localhost:5000";
        }

        public async Task<VulnerabilityAnalysisResult> AnalyzeCodeAsync(string code)
        {
            try
            {
                var requestData = new
                {
                    code = code,
                    language = "csharp"
                };

                var content = new StringContent(
                    JsonConvert.SerializeObject(requestData),
                    Encoding.UTF8,
                    "application/json"
                );

                var response = await _httpClient.PostAsync($"{_apiUrl}/analyze", content);

                if (response.IsSuccessStatusCode)
                {
                    var jsonResponse = await response.Content.ReadAsStringAsync();
                    return JsonConvert.DeserializeObject<VulnerabilityAnalysisResult>(jsonResponse);
                }
                else
                {
                    // Handle error response
                    var errorContent = await response.Content.ReadAsStringAsync();
                    throw new Exception($"API returned status code {response.StatusCode}: {errorContent}");
                }
            }
            catch (Exception ex)
            {
                // Handle exceptions (could be logged, etc.)
                throw new Exception($"Error analyzing code for vulnerabilities: {ex.Message}", ex);
            }
        }
    }
}