@model Developer_Toolbox.Models.Exercise

<section style="display: grid; grid-template-areas: 'Cerinta Editor Editor Editor'">
    @if (TempData.ContainsKey("message"))
    {
        <h4 class="@ViewBag.MessageType p-3 rounded-3 text-center mb-5">@ViewBag.Message</h4>
    }
    <div class="m-5" style="grid-area: Cerinta">
        <div class="card product">
            <div class="bg-image hover-zoom ripple" data-mdb-ripple-color="light">
                <div>
                    <div class="hover-overlay">
                        <div class="mask" style="background-color: rgba(251, 251, 251, 0.15);"></div>
                    </div>
                </div>
            </div>

            <div class="card-body">
                <div href="" class="text-reset">
                    <h5 class="card-title mb-3">@Model.Title</h5>
                </div>

                <div>
                    <h6>@Model.Category.CategoryName</h6>
                    <h6><small>Posted on: @Model.Date</small></h6>
                    @if (ViewBag.CompleteProfile)
                    {
                        <h6><small>Posted by: @Model.User.FirstName @Model.User.LastName</small></h6>
                    }
                </div>

                <div>
                    <h6>Instructions</h6>
                    <p>@Model.Description</p>
                </div>

                <div>
                    <h6>Restrictions</h6>
                    <div class="card-text">@Html.Raw(Model.Restrictions)</div>
                </div>

                <div>
                    <h6>Examples</h6>
                    <div class="card-text">@Html.Raw(Model.Examples)</div>
                </div>
            </div>
            @if (ViewBag.CurrentUser == Model.UserId || ViewBag.IsAdmin)
            {
                <div class="d-flex align-items-center justify-content-between m-2">

                    <a class="btn alert-success" href="/Exercises/Edit/@Model.Id">Edit Exercise</a>

                    <form method="post" action="/Exercises/Delete/@Model.Id">

                        <button class="btn btn-danger" type="submit">Delete Exercise</button>

                    </form>

                </div>
            }

        </div>

        <div id="success-message" class="card d-none text-center text-success mt-2">
            <h1>Success!</h1>
            <p>All tests passed</p>
        </div>
    </div>

    <div id="editor" class="my-5 mx-2" style="grid-area: Editor"></div>
    <br />
    <div class="d-flex gap-4 gap-1 justify-content-start mt-2">
        <div class="d-flex gap-1">
            lang:
            @Html.DropDownList("ProgrammingLanguage",
            (IEnumerable<SelectListItem>)ViewBag.ProgrammingLanguagesList,
            new { @class = "form-control", @id = "langList" }
            )
        </div>
        <button formaction="/Exercises/Show" id="submit" class="btn btn-success" type="submit">Submit</button>
    </div>

    <br />
    @if (!string.IsNullOrEmpty(ViewBag.Result))
    {
        <div>
            <h3>Execution Result:</h3>
            <pre>@ViewBag.Result</pre>
        </div>
    }

    @if (!string.IsNullOrEmpty(ViewBag.Error))
    {
        <div>
            <h3>Error:</h3>
            <pre>@ViewBag.Error</pre>
        </div>
    }
</section>

<script>
    var editor = ace.edit("editor");
    const python = ace.createEditSession("def add(x, y):\n\treturn x + y\nx_input = int(input())\ny_input = int(input())\nprint(add(x_input, y_input))", "ace / mode / python");
    const cpp = ace.createEditSession("#include <iostream>\nusing namespace std;\n\nint main() {\n   int a, b;\n   cin >> a >> b;\n   cout << a+b;\n   return 0;\n}", "ace/mode/c_cpp");
    editor.setSession(python);

    const element = document.getElementById("submit");
    element.addEventListener("click", getCode);

    const langDropdown = document.getElementById("langList");
    langDropdown.addEventListener("change", changeLang);

    async function getCode() {
        console.log(editor.getValue());
        const pr = document.getElementById("langList").value;

        var data = editor.getValue();
        try {
            const res = await $.post("/Exercises/ExecuteCode", { id: @Model.Id, solution: data, language: pr });
            if (res.status === 200 && res.test_results) {
                let { test_results } = JSON.parse(JSON.parse(res.test_results).result);
                console.log(test_results);
                console.log("Parsed result:", test_results);
                displayTestResults(test_results);

                showSuccess(test_results)
            } else {
                console.log("fail")
            }
            console.log(res.status)
        } catch (err) {
            console.log(err)
        }

        console.log('not awaited')
    }
    function displayTestResults(result) {
        Object.keys(result).forEach(key => {
            console.log(`Test case ${key} - Success:`, result[key].success);
        });
    }
    function changeLang() {
        const pr = document.getElementById("langList").value;
        if (pr == "cpp") {
            editor.setSession(cpp);
        }
        else if (pr == "python") {
            editor.setSession(python);
        }
        console.log(pr);
    }

    function showSuccess(result) {
        const successContainer = document.getElementById('success-message');
        if (successContainer) {
            successContainer.innerHTML = '';
            if (result) {
                Object.keys(result).forEach(key => {
                    const test = result[key];
                    const testElement = document.createElement('div');
                    testElement.textContent = `Test case ${key}: ${test.success ? 'Passed' : 'Failed'}`;
                    testElement.classList.add(test.success ? 'text-success' : 'text-danger');
                    successContainer.appendChild(testElement);

                    if (!test.success) {
                        // Daca testele au esuat, afisez expected output
                        const expectedOutputElement = document.createElement('div');
                        expectedOutputElement.textContent = `Expected output: ${test.expected_output}`;
                        successContainer.appendChild(expectedOutputElement);
                    }
                });
            } else {
                const messageElement = document.createElement('div');
                messageElement.textContent = 'Tests executed successfully.';
                successContainer.appendChild(messageElement);
            }
            successContainer.classList.toggle('d-none');
        }
    }



</script>