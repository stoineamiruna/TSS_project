@model Developer_Toolbox.Models.LockedExercise

<link rel="stylesheet" href="~/css/feature_section.css" asp-append-version="true" />

<section class="features-area features-one">
    <!-- Modal -->
    <div class="modal fade" id="exampleModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h1 class="modal-title fs-5" id="exampleModalLabel">Warning, please read</h1>
                    <button onclick="handleModal('', false)" type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    ...
                </div>
                <div class="modal-footer">
                    <button onclick="handleModal('', false)" type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                    <button onclick="handleModal('', false)" type="button" class="btn btn-primary">Understood</button>
                </div>
            </div>
        </div>
    </div>
    @if (TempData.ContainsKey("message"))
    {
        <h4 class="@ViewBag.MessageType p-3 rounded-3 text-center mb-5">@ViewBag.Message</h4>
    }
    <div>
    </div>
    <div class="container">
        <div class="row justify-content-center">
            <div class="col-lg-6">
                <div class="section-title text-center">
                    <h3 class="title">@Model.Title</h3>
                </div>
                <!-- row -->
            </div>
        </div>

        <div class="row justify-content-center">
            <div class="row justify-content-center">
                <div class="col d-flex justify-content-end" style="margin-right: 2%">
                    <div id="success-message" class="card d-none text-center text-success mt-2 align-self-start">
                        <h1>Success!</h1>
                        <p>All tests passed</p>
                    </div>
                    @if (!string.IsNullOrEmpty(ViewBag.Result))
                    {
                        <div>
                            <h3>Execution Result:</h3>
                            <pre>@ViewBag.Result</pre>
                        </div>
                    }

                    @if (!string.IsNullOrEmpty(ViewBag.Error))
                    {
                        <div>
                            <h3>Error:</h3>
                            <pre>@ViewBag.Error</pre>
                        </div>
                    }
                    <div class="d-flex align-items-center px-3">
                        @Html.DropDownList("ProgrammingLanguage",
                        (IEnumerable<SelectListItem>)ViewBag.ProgrammingLanguagesList,
                        new { @class = "form-control", @id = "langList" }
                        )

                    </div>
                    @if (ViewBag.CurrentUser == Model.UserId || ViewBag.IsAdmin)
                    {
                        <div class="d-flex flex-row justify-content-between m-2">
                            <a class="btn btn-outline-primary py-sm-3 px-sm-5 rounded-pill me-3" style="font-weight:bold;" href="/Exercises/Edit/@Model.Id"> Edit Exercise</a>
                            <a class="btn btn-outline-primary py-sm-3 px-sm-5 rounded-pill me-3" style="font-weight:bold; left: 5px;" href="/Exercises/Delete/@Model.Id">Delete Exercise</a>
                        </div>
                    }
                </div>
            </div>
        </div>

        <div class="d-flex flex-column align-content-center px-3" style="padding-top: 3rem">
            <div class="row d-flex justify-content-between align-content-start" style="max-width: 90vw">
                <div class="card shadow-lg" style="max-width: 42vw">
                    <div class="card-body">
                        <div>
                            <p class="fs-5">Posted on: @Model.Date</p>
                            @if (ViewBag.CompleteProfile)
                            {
                                <h6><small>Posted by: @Model.User.UserName</small></h6>
                            }
                        </div>
                        <div class="py-3">
                            <p class="fs-4 text-black">Instructions</p>
                            <p>@Model.Description</p>
                        </div>

                        <div class="py-3">
                            <p class="fs-4 text-black">Restrictions</p>
                            <div class="card-text">@Html.Raw(Model.Restrictions)</div>
                        </div>

                        <div class="py-3">
                            <p class="fs-4 text-black">Examples</p>
                            <div class="card-text">@Html.Raw(Model.Examples)</div>
                        </div>
                    </div>
                </div>
                <div id="editor" class="shadow-lg" style="width: 45vw; min-height: 90vh"></div>
            </div>
        </div>
        <br />
    </div>
    <div class="d-flex justify-content-end" style="max-width: 90vw">
        <button onclick="getCode()" formaction="/Exercises/Show" id="submit" class="btn btn-primary fs-5 fw-bold" type="submit">Submit</button>    <!-- container -->
    </div>


</section>


<script type="text/javascript">
    var editor = ace.edit("editor");
    const python = ace.createEditSession("def add(x, y):\n\treturn x + y\nx_input = int(input())\ny_input = int(input())\nprint(add(x_input, y_input))", "ace/mode/python");
    const cpp = ace.createEditSession("#include <iostream>\nusing namespace std;\n\nint main() {\n   int a, b;\n   cin >> a >> b;\n   cout << a+b;\n   return 0;\n}", "ace/mode/c_cpp");
    editor.setSession(python);

    const langDropdown = document.getElementById("langList");
    langDropdown.addEventListener("change", changeLang);

    const modalElement = document.getElementById('exampleModal');
    let modal = null;

    async function getCode() {
        console.log(editor.getValue());
        const pr = document.getElementById("langList").value;
        const btnSubmit = document.getElementById("submit");
        const successContainer = document.getElementById('success-message');
        successContainer.innerHTML = '';
        successContainer.classList.add('d-none');

        var data = editor.getValue();
        try {
            btnSubmit.disabled = true;
            btnSubmit.innerText = "Awating...";
            // Wrap $.post in a Promise
            const res = await new Promise((resolve, reject) => {
                $.post("/LockedExercises/ExecuteCode", { id: @Model.Id, solution: data, language: pr }, resolve).fail(reject);
            });

            if (res.status === 200 && res.test_results) {
                let { test_results } = JSON.parse(JSON.parse(res.test_results).result);
                console.log(test_results);
                console.log("Parsed result:", test_results);
                displayTestResults(test_results);

                showSuccess(test_results);
                return
            }

            throw new Error("Something went wrong")
        } catch (err) {
            if (err.status) {
                console.log(`Error Code: ${err.status}`);
                if (err.status === 404) {
                    handleModal("Resource not found.", true);
                } else if (err.status === 429) {
                    handleModal("Limit reached, please try again later!", true);
                } else if (err.status === 500) {
                    handleModal("Server error. Please try again later.", true);
                }
                console.log('primul')
                handleModal("Unhandled error, please contact us.", true);
                return
            }
            console.log('al doilea')
            console.error(error)
            handleModal("Unhandled error, please contact us.", true);
        } finally {
            btnSubmit.disabled = false;
            btnSubmit.innerText = "Submit";
        }

        console.log('not awaited');
    }

    function displayTestResults(result) {

        Object.keys(result).forEach(key => {
            console.log(`Test case ${key} - Success:`, result[key].success);
        });

        console.log('in display test results');
    }

    function changeLang() {
        const pr = document.getElementById("langList").value;
        if (pr == "cpp") {
            editor.setSession(cpp);
        }
        else if (pr == "python") {
            editor.setSession(python);
        }
        console.log(pr);
    }

    function showSuccess(result) {

        if (result) {
            Object.keys(result).forEach(key => {
                const test = result[key];
                handleModal(`Test case ${key}: ${test.success ? 'Passed' : 'Failed'}`, true, 'Congratulations!', 'green');

                if (!test.success) {
                    // Daca testele au esuat, afisez expected output
                    handleModal(`Expected output: ${test.expected_output}`, true, 'We are sorry!', 'red');
                }
            });

        } else {
            handleModal('Tests executed successfully.', true, 'blue');
        }

    }

    function handleModal(message, show, title = "Warning, please read", color = "black") {
        if (!modal) {
            modal = new bootstrap.Modal(modalElement);
        }
        console.log(message);
        const modalBody = modalElement.querySelector('.modal-body');
        modalBody.textContent = message;
        modalBody.style.color = color;

        const modalTitle = modalElement.querySelector('.modal-title');
        modalTitle.textContent = title;


        show ? modal.show() : modal.hide();
    }
</script> 